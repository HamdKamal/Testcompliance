public async Task<ResponseResult<ComplianceReportDto>> GetComplianceReport(Guid? id)
{
    var report = await dbContext.ComplianceReports
                .Include(r => r.Auditors)
                .Include(r => r.Participants)
                .Include(r => r.Questaions)
                .Include(r => r.PreviousRecommendations)
                .FirstOrDefaultAsync(a => a.Id == id) 
                ?? 
                throw new BadRequestException("report not found");

    ComplianceReportDto complianceReportDto = new()
    {
        Id = report.Id,
        ReportTypeID = report.ReportTypeID,
        ReportNumber = report.ReportNumber,
        VisitTypeID = report.VisitTypeID,
        LicenseID = report.LicenseID,
        FacilityOrLine = report.FacilityOrLine,
        Activity = report.Activity,
        SiteName = report.SiteName,
        InspectionScope = report.InspectionScope,
        LocationID = report.LocationID,
        LicenseNumber = report.LicenseNumber,
        CommercialOperationDate = report.CommercialOperationDate,
        LicenseIssueDate = report.LicenseIssueDate,
        VisitDate = report.VisitDate,
        Recommendation = report.Recommendation,
        Notes = report.Notes,
        CreatedByID = report.CreatedByID,
        CreatedOn = report.CreatedOn,
        ComplianceDetailId = report.ComplianceDetailId
    };
    // Add nested entities
    if (report?.Auditors != null)
    {
        foreach (var audit in report.Auditors)
        {
            complianceReportDto?.Auditors?.Add(new AuditorsDto
            {
                Id = audit.ID,
                Name = audit.Name ?? "",
            });
        }
    }
    if (report?.Participants != null)
    {
        foreach (var participant in report.Participants)
        {
            complianceReportDto?.Participants?.Add(new LicenseParticipantDto
            {
                Name = participant.Name,
                Department = participant.Department,
                Position = participant.Position,
                Phone = participant.Phone,
                Email = participant.Email,
            });
        }
    }
    if (report?.PreviousRecommendations != null)
    {
        complianceReportDto.PreviousRecommendations = new PreviousRecommendationsDto
        {
            VisitDate = report.PreviousRecommendations.VisitDate,
            CompletionStatusID = report.PreviousRecommendations.CompletionStatusID,
            Comments = report.PreviousRecommendations.Comments,
            Action = report.PreviousRecommendations.Action,
            ReportID = report.Id
        };
    }
    if (report?.Questaions != null)
    {
        foreach (var questaion in report.Questaions)
        {
            complianceReportDto?.Questaions?.Add(new QuestaionDto
            {
                CategoryID = questaion.CategoryID,
                CategoryName = questaion.CategoryName,
                SubCategoryID = questaion.SubCategoryID,
                SubCategoryName = questaion.SubCategoryName,
                EntryID = questaion.EntryID,
                EntryName = questaion.EntryName,

                Grade = questaion.Grade,
                Evidence = questaion.Evidence,
                EvidencePath = questaion.EvidencePath,
                ReportID = report.Id,
            });
        }
    }
    var attachments = await dbContext.Attachments.Where(s => s.EntityId == report.Id && s.AttachmentTypeId == (long)AttachmentTypeEnum.ReportAttachment && (s.IsDeleted == false || s.IsDeleted == null)).ToListAsync();
    complianceReportDto.AttachmentsList = attachments.Select(s => new AttachmentDto()
    {
        AttachmentGuid = s.AttachmentGuid,
        AttachmentId = s.Id,
        AttachmentName = s.AttachmentName,
        AttachmentType = (AttachmentTypeEnum)s.AttachmentTypeId,
        EntityId = s.EntityId,
        EntityName = s.EntityName
    }).ToList();

    return ResponseResult<ComplianceReportDto>.Success(complianceReportDto);
}


public async Task<ResponseResult<List<ComplianceReportDto>>> GetAllComplianceReports()
{
    var reports = await dbContext.ComplianceReports
                .Include(r => r.Auditors)
                .Include(r => r.Participants)
                .Include(r => r.Questaions)
                .Include(r => r.PreviousRecommendations)
                .ToListAsync();

    var reportDtos = new List<ComplianceReportDto>();

    foreach (var report in reports)
    {
        var complianceReportDto = new ComplianceReportDto
        {
            Id = report.Id,
            ReportTypeID = report.ReportTypeID,
            ReportNumber = report.ReportNumber,
            VisitTypeID = report.VisitTypeID,
            LicenseID = report.LicenseID,
            FacilityOrLine = report.FacilityOrLine,
            Activity = report.Activity,
            SiteName = report.SiteName,
            InspectionScope = report.InspectionScope,
            LocationID = report.LocationID,
            LicenseNumber = report.LicenseNumber,
            CommercialOperationDate = report.CommercialOperationDate,
            LicenseIssueDate = report.LicenseIssueDate,
            VisitDate = report.VisitDate,
            Recommendation = report.Recommendation,
            Notes = report.Notes,
            CreatedByID = report.CreatedByID,
            CreatedOn = report.CreatedOn,
            ComplianceDetailId = report.ComplianceDetailId,
            Auditors = report.Auditors?.Select(a => new AuditorsDto
            {
                Id = a.ID,
                Name = a.Name ?? ""
            }).ToList(),
            Participants = report.Participants?.Select(p => new LicenseParticipantDto
            {
                Name = p.Name,
                Department = p.Department,
                Position = p.Position,
                Phone = p.Phone,
                Email = p.Email,
            }).ToList(),
            Questaions = report.Questaions?.Select(q => new QuestaionDto
            {
                CategoryID = q.CategoryID,
                CategoryName = q.CategoryName,
                SubCategoryID = q.SubCategoryID,
                SubCategoryName = q.SubCategoryName,
                EntryID = q.EntryID,
                EntryName = q.EntryName,
                Grade = q.Grade,
                Evidence = q.Evidence,
                EvidencePath = q.EvidencePath,
                ReportID = q.ReportID
            }).ToList(),
            PreviousRecommendations = report.PreviousRecommendations == null ? null : new PreviousRecommendationsDto
            {
                VisitDate = report.PreviousRecommendations.VisitDate,
                CompletionStatusID = report.PreviousRecommendations.CompletionStatusID,
                Comments = report.PreviousRecommendations.Comments,
                Action = report.PreviousRecommendations.Action,
                ReportID = report.Id
            }
        };

        // Fetch attachments for each report
        var attachments = await dbContext.Attachments
            .Where(s => s.EntityId == report.Id &&
                        s.AttachmentTypeId == (long)AttachmentTypeEnum.ReportAttachment &&
                        (s.IsDeleted == false || s.IsDeleted == null))
            .ToListAsync();

        complianceReportDto.AttachmentsList = attachments.Select(s => new AttachmentDto
        {
            AttachmentGuid = s.AttachmentGuid,
            AttachmentId = s.Id,
            AttachmentName = s.AttachmentName,
            AttachmentType = (AttachmentTypeEnum)s.AttachmentTypeId,
            EntityId = s.EntityId,
            EntityName = s.EntityName
        }).ToList();

        reportDtos.Add(complianceReportDto);
    }

    return ResponseResult<List<ComplianceReportDto>>.Success(reportDtos);
}

